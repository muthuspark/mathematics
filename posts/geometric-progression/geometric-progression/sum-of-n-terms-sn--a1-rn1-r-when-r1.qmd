---
title: "Sum of n terms (Sn = a(1-r^n)/(1-r) when r≠1)"
categories: ["Geometric Progression", "Geometric Progression"]


---



To solve this problem, we need to calculate the sum of a series where each term is generated by raising an integer `r` (common ratio) to successive powers and then dividing by `(r - 1)`. The sum is computed from `0` to `n-1` terms. 

### Approach
The approach involves handling different cases based on the values of `a`, `r`, and `n`:

1. **Case when r = 1**: If the common ratio `r` is 1, each term in the series becomes equal to the first term `a`. Thus, the sum from `0` to `n-1` will be `n * a`.

2. **Case when r = 0**: If the common ratio `r` is 0, each term after the first (starting with `a`) will be 0. Hence, the sum will simply be `a` if `n` is non-negative.

3. **General Case when r ≠ 1 and r ≠ 0**:
   - Handle cases where `a` is 0 separately by returning 0 since all terms will be zero.
   - Use the formula for the sum of a geometric series to compute the sum efficiently: 
     $$S = \frac{a (r^n - 1)}{r - 1}$$

### Solution Code
```python
n = int(input())
a, r = map(int, input().split())

if r == 1:
    total = a * n
elif r == 0:
    total = a
else:
    if a == 0:
        total = 0
    else:
        total = (a * (r ** n - 1)) // (r - 1)

print(total)
```

### Explanation
The solution efficiently handles different cases to compute the sum of the series:

- For `r = 1`, each term is `a`, so the sum is simply `n * a`.
- For `r = 0`, after the first term, all subsequent terms are zero, thus the sum is just `a`.
- When both `a` and `r` are non-zero (and not equal to 1), we use the geometric series formula. This avoids iterating through each term up to `n-1` and directly computes the result in constant time.

This approach ensures that all edge cases and constraints are handled efficiently, providing the correct sum for any valid input values of `a`, `r`, and `n`.
